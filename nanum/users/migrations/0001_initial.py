# -*- coding: utf-8 -*-
# Generated by Django 1.11.7 on 2017-11-24 06:02
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import users.models.user


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
        ('topics', '0001_initial'),
        ('posts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(blank=True, max_length=254, unique=True, verbose_name='email address')),
                ('facebook_user_id', models.PositiveIntegerField(blank=True, unique=True, verbose_name='facebook user id')),
                ('user_type', models.CharField(choices=[('FB', 'Facebook'), ('EM', 'Email')], default='EM', max_length=1)),
                ('name', models.CharField(max_length=30, verbose_name='full name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', users.models.user.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AnswerBookmark',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('answer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='posts.Answer')),
            ],
        ),
        migrations.CreateModel(
            name='AnswerDownVote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('answer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='posts.Answer')),
            ],
        ),
        migrations.CreateModel(
            name='AnswerUpVote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('answer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='posts.Answer')),
            ],
        ),
        migrations.CreateModel(
            name='BaseAnswerCommentVote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='BaseNestedCommentVote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='BaseQuestionCommentVote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='EducationCredentials',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('concentration', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='concentration_credentials', to='topics.Topic')),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='school_credentials', to='topics.Topic')),
            ],
        ),
        migrations.CreateModel(
            name='EmploymentCredentials',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.CharField(blank=True, max_length=50)),
                ('start_year', models.IntegerField(blank=True, choices=[(1900, 1900), (1901, 1901), (1902, 1902), (1903, 1903), (1904, 1904), (1905, 1905), (1906, 1906), (1907, 1907), (1908, 1908), (1909, 1909), (1910, 1910), (1911, 1911), (1912, 1912), (1913, 1913), (1914, 1914), (1915, 1915), (1916, 1916), (1917, 1917), (1918, 1918), (1919, 1919), (1920, 1920), (1921, 1921), (1922, 1922), (1923, 1923), (1924, 1924), (1925, 1925), (1926, 1926), (1927, 1927), (1928, 1928), (1929, 1929), (1930, 1930), (1931, 1931), (1932, 1932), (1933, 1933), (1934, 1934), (1935, 1935), (1936, 1936), (1937, 1937), (1938, 1938), (1939, 1939), (1940, 1940), (1941, 1941), (1942, 1942), (1943, 1943), (1944, 1944), (1945, 1945), (1946, 1946), (1947, 1947), (1948, 1948), (1949, 1949), (1950, 1950), (1951, 1951), (1952, 1952), (1953, 1953), (1954, 1954), (1955, 1955), (1956, 1956), (1957, 1957), (1958, 1958), (1959, 1959), (1960, 1960), (1961, 1961), (1962, 1962), (1963, 1963), (1964, 1964), (1965, 1965), (1966, 1966), (1967, 1967), (1968, 1968), (1969, 1969), (1970, 1970), (1971, 1971), (1972, 1972), (1973, 1973), (1974, 1974), (1975, 1975), (1976, 1976), (1977, 1977), (1978, 1978), (1979, 1979), (1980, 1980), (1981, 1981), (1982, 1982), (1983, 1983), (1984, 1984), (1985, 1985), (1986, 1986), (1987, 1987), (1988, 1988), (1989, 1989), (1990, 1990), (1991, 1991), (1992, 1992), (1993, 1993), (1994, 1994), (1995, 1995), (1996, 1996), (1997, 1997), (1998, 1998), (1999, 1999), (2000, 2000), (2001, 2001), (2002, 2002), (2003, 2003), (2004, 2004), (2005, 2005), (2006, 2006), (2007, 2007), (2008, 2008), (2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017)], null=True)),
                ('end_year', models.IntegerField(blank=True, choices=[(1900, 1900), (1901, 1901), (1902, 1902), (1903, 1903), (1904, 1904), (1905, 1905), (1906, 1906), (1907, 1907), (1908, 1908), (1909, 1909), (1910, 1910), (1911, 1911), (1912, 1912), (1913, 1913), (1914, 1914), (1915, 1915), (1916, 1916), (1917, 1917), (1918, 1918), (1919, 1919), (1920, 1920), (1921, 1921), (1922, 1922), (1923, 1923), (1924, 1924), (1925, 1925), (1926, 1926), (1927, 1927), (1928, 1928), (1929, 1929), (1930, 1930), (1931, 1931), (1932, 1932), (1933, 1933), (1934, 1934), (1935, 1935), (1936, 1936), (1937, 1937), (1938, 1938), (1939, 1939), (1940, 1940), (1941, 1941), (1942, 1942), (1943, 1943), (1944, 1944), (1945, 1945), (1946, 1946), (1947, 1947), (1948, 1948), (1949, 1949), (1950, 1950), (1951, 1951), (1952, 1952), (1953, 1953), (1954, 1954), (1955, 1955), (1956, 1956), (1957, 1957), (1958, 1958), (1959, 1959), (1960, 1960), (1961, 1961), (1962, 1962), (1963, 1963), (1964, 1964), (1965, 1965), (1966, 1966), (1967, 1967), (1968, 1968), (1969, 1969), (1970, 1970), (1971, 1971), (1972, 1972), (1973, 1973), (1974, 1974), (1975, 1975), (1976, 1976), (1977, 1977), (1978, 1978), (1979, 1979), (1980, 1980), (1981, 1981), (1982, 1982), (1983, 1983), (1984, 1984), (1985, 1985), (1986, 1986), (1987, 1987), (1988, 1988), (1989, 1989), (1990, 1990), (1991, 1991), (1992, 1992), (1993, 1993), (1994, 1994), (1995, 1995), (1996, 1996), (1997, 1997), (1998, 1998), (1999, 1999), (2000, 2000), (2001, 2001), (2002, 2002), (2003, 2003), (2004, 2004), (2005, 2005), (2006, 2006), (2007, 2007), (2008, 2008), (2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017)], null=True)),
                ('working_status', models.BooleanField(default=False)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='company_credentials', to='topics.Topic')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionBookmark',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='posts.Question')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionFollow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='posts.Question')),
            ],
        ),
        migrations.CreateModel(
            name='TopicExpertiseFollow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='topics.Topic')),
            ],
        ),
        migrations.CreateModel(
            name='TopicInterestFollow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='topics.Topic')),
            ],
        ),
        migrations.CreateModel(
            name='UserFollow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='AnswerCommentDownVote',
            fields=[
                ('baseanswercommentvote_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='users.BaseAnswerCommentVote')),
            ],
            options={
                'abstract': False,
            },
            bases=('users.baseanswercommentvote',),
        ),
        migrations.CreateModel(
            name='AnswerCommentUpVote',
            fields=[
                ('baseanswercommentvote_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='users.BaseAnswerCommentVote')),
            ],
            options={
                'abstract': False,
            },
            bases=('users.baseanswercommentvote',),
        ),
        migrations.CreateModel(
            name='NestedCommentDownVote',
            fields=[
                ('basenestedcommentvote_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='users.BaseNestedCommentVote')),
            ],
            options={
                'abstract': False,
            },
            bases=('users.basenestedcommentvote',),
        ),
        migrations.CreateModel(
            name='NestedCommentUpVote',
            fields=[
                ('basenestedcommentvote_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='users.BaseNestedCommentVote')),
            ],
            options={
                'abstract': False,
            },
            bases=('users.basenestedcommentvote',),
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='')),
                ('main_credential', models.CharField(blank=True, max_length=100)),
                ('description', models.TextField(blank=True, max_length=2000)),
                ('gender', models.CharField(blank=True, max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='QuestionCommentDownVote',
            fields=[
                ('basequestioncommentvote_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='users.BaseQuestionCommentVote')),
            ],
            options={
                'abstract': False,
            },
            bases=('users.basequestioncommentvote',),
        ),
        migrations.CreateModel(
            name='QuestionCommentUpVote',
            fields=[
                ('basequestioncommentvote_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='users.BaseQuestionCommentVote')),
            ],
            options={
                'abstract': False,
            },
            bases=('users.basequestioncommentvote',),
        ),
        migrations.AddField(
            model_name='userfollow',
            name='target',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follower_relations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userfollow',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following_relations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='topicinterestfollow',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='topicexpertisefollow',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='questionfollow',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='questionbookmark',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='basequestioncommentvote',
            name='comment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='posts.QuestionComment'),
        ),
        migrations.AddField(
            model_name='basequestioncommentvote',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='basenestedcommentvote',
            name='comment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='posts.NestedComment'),
        ),
        migrations.AddField(
            model_name='basenestedcommentvote',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='baseanswercommentvote',
            name='comment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='posts.AnswerComment'),
        ),
        migrations.AddField(
            model_name='baseanswercommentvote',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='answerupvote',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='answerdownvote',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='answerbookmark',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='bookmarked_answers',
            field=models.ManyToManyField(blank=True, related_name='bookmarked_users', through='users.AnswerBookmark', to='posts.Answer'),
        ),
        migrations.AddField(
            model_name='user',
            name='bookmarked_questions',
            field=models.ManyToManyField(blank=True, related_name='who_bookmarked', through='users.QuestionBookmark', to='posts.Question'),
        ),
        migrations.AddField(
            model_name='user',
            name='downvoted_answers',
            field=models.ManyToManyField(blank=True, related_name='downvoted_users', through='users.AnswerDownVote', to='posts.Answer'),
        ),
        migrations.AddField(
            model_name='user',
            name='following',
            field=models.ManyToManyField(blank=True, related_name='followers', through='users.UserFollow', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='following_questions',
            field=models.ManyToManyField(blank=True, related_name='followers', through='users.QuestionFollow', to='posts.Question'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='topic_expertise',
            field=models.ManyToManyField(blank=True, related_name='users_with_expertise', through='users.TopicExpertiseFollow', to='topics.Topic'),
        ),
        migrations.AddField(
            model_name='user',
            name='topic_interests',
            field=models.ManyToManyField(blank=True, related_name='users_with_interest', through='users.TopicInterestFollow', to='topics.Topic'),
        ),
        migrations.AddField(
            model_name='user',
            name='upvoted_answers',
            field=models.ManyToManyField(blank=True, related_name='upvoted_users', through='users.AnswerUpVote', to='posts.Answer'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='userfollow',
            unique_together=set([('user', 'target')]),
        ),
        migrations.AlterUniqueTogether(
            name='topicinterestfollow',
            unique_together=set([('user', 'topic')]),
        ),
        migrations.AlterUniqueTogether(
            name='topicexpertisefollow',
            unique_together=set([('user', 'topic')]),
        ),
        migrations.AlterUniqueTogether(
            name='questionfollow',
            unique_together=set([('user', 'question')]),
        ),
        migrations.AlterUniqueTogether(
            name='questionbookmark',
            unique_together=set([('user', 'question')]),
        ),
        migrations.AddField(
            model_name='employmentcredentials',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employment_credentials', to='users.Profile'),
        ),
        migrations.AddField(
            model_name='educationcredentials',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='education_credentials', to='users.Profile'),
        ),
        migrations.AlterUniqueTogether(
            name='basequestioncommentvote',
            unique_together=set([('user', 'comment')]),
        ),
        migrations.AlterUniqueTogether(
            name='basenestedcommentvote',
            unique_together=set([('user', 'comment')]),
        ),
        migrations.AlterUniqueTogether(
            name='baseanswercommentvote',
            unique_together=set([('user', 'comment')]),
        ),
        migrations.AlterUniqueTogether(
            name='answerupvote',
            unique_together=set([('user', 'answer')]),
        ),
        migrations.AlterUniqueTogether(
            name='answerdownvote',
            unique_together=set([('user', 'answer')]),
        ),
        migrations.AlterUniqueTogether(
            name='answerbookmark',
            unique_together=set([('user', 'answer')]),
        ),
        migrations.AddField(
            model_name='user',
            name='downvoted_answer_comments',
            field=models.ManyToManyField(blank=True, related_name='downvoted_users', through='users.AnswerCommentDownVote', to='posts.AnswerComment'),
        ),
        migrations.AddField(
            model_name='user',
            name='downvoted_nested_comments',
            field=models.ManyToManyField(blank=True, related_name='downvoted_users', through='users.NestedCommentDownVote', to='posts.NestedComment'),
        ),
        migrations.AddField(
            model_name='user',
            name='downvoted_question_comments',
            field=models.ManyToManyField(blank=True, related_name='downvoted_users', through='users.QuestionCommentDownVote', to='posts.QuestionComment'),
        ),
        migrations.AddField(
            model_name='user',
            name='upvoted_answer_comments',
            field=models.ManyToManyField(blank=True, related_name='upvoted_users', through='users.AnswerCommentUpVote', to='posts.AnswerComment'),
        ),
        migrations.AddField(
            model_name='user',
            name='upvoted_nested_comments',
            field=models.ManyToManyField(blank=True, related_name='upvoted_users', through='users.NestedCommentUpVote', to='posts.NestedComment'),
        ),
        migrations.AddField(
            model_name='user',
            name='upvoted_question_comments',
            field=models.ManyToManyField(blank=True, related_name='upvoted_users', through='users.QuestionCommentUpVote', to='posts.QuestionComment'),
        ),
    ]
